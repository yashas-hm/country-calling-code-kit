library;

/// A class representing a country with its details.
///
/// This class holds information about a country including its name,
/// flag asset path, country code, and calling code.
class Country {
  /// The full name of the country.
  final String name;

  /// The asset path to the country's flag image.
  final String flag;

  /// The country code enum value.
  final CountryCode countryCode;

  /// The international calling code for the country (e.g., '+1', '+44').
  final String callCode;

  /// Creates a new [Country] instance.
  ///
  /// All parameters are required:
  /// - [name]: The full name of the country
  /// - [flag]: The asset path to the country's flag image
  /// - [countryCode]: The country code enum value
  /// - [callCode]: The international calling code for the country
  const Country({
    required this.name,
    required this.flag,
    required this.countryCode,
    required this.callCode,
  });
}

/// An enumeration of country codes based on ISO 3166-1 alpha-2 standard.
///
/// This enum represents country codes using two-letter codes (with a few exceptions
/// that use underscores to avoid Dart keyword conflicts).
enum CountryCode {
  af,
  ax,
  al,
  dz,
  as,
  ad,
  ao,
  ai,
  aq,
  ag,
  ar,
  am,
  aw,
  au,
  at,
  az,
  bs,
  bh,
  bd,
  bb,
  by,
  be,
  bz,
  bj,
  bm,
  bt,
  bo,
  bq,
  ba,
  bw,
  bv,
  br,
  io,
  um,
  vg,
  vi,
  bn,
  bg,
  bf,
  bi,
  kh,
  cm,
  ca,
  cv,
  ky,
  cf,
  td,
  cl,
  cn,
  cx,
  cc,
  co,
  km,
  cg,
  cd,
  ck,
  cr,
  hr,
  cu,
  cw,
  cy,
  cz,
  dk,
  dj,
  dm,
  do_,
  ec,
  eg,
  sv,
  gq,
  er,
  ee,
  et,
  fk,
  fo,
  fj,
  fi,
  fr,
  gf,
  pf,
  tf,
  ga,
  gm,
  ge,
  de,
  gh,
  gi,
  gr,
  gl,
  gd,
  gp,
  gu,
  gt,
  gg,
  gn,
  gw,
  gy,
  ht,
  hm,
  va,
  hn,
  hk,
  hu,
  is_,
  in_,
  id,
  ci,
  ir,
  iq,
  ie,
  im,
  il,
  it,
  jm,
  jp,
  je,
  jo,
  kz,
  ke,
  ki,
  kw,
  kg,
  la,
  lv,
  lb,
  ls,
  lr,
  ly,
  li,
  lt,
  lu,
  mo,
  mk,
  mg,
  mw,
  my,
  mv,
  ml,
  mt,
  mh,
  mq,
  mr,
  mu,
  yt,
  mx,
  fm,
  md,
  mc,
  mn,
  me,
  ms,
  ma,
  mz,
  mm,
  na,
  nr,
  np,
  nl,
  nc,
  nz,
  ni,
  ne,
  ng,
  nu,
  nf,
  kp,
  mp,
  no,
  om,
  pk,
  pw,
  ps,
  pa,
  pg,
  py,
  pe,
  ph,
  pn,
  pl,
  pt,
  pr,
  qa,
  xk,
  re,
  ro,
  ru,
  rw,
  bl,
  sh,
  kn,
  lc,
  mf,
  pm,
  vc,
  ws,
  sm,
  st,
  sa,
  sn,
  rs,
  sc,
  sl,
  sg,
  sx,
  sk,
  si,
  sb,
  so,
  za,
  gs,
  kr,
  ss,
  es,
  lk,
  sd,
  sr,
  sj,
  sz,
  se,
  ch,
  sy,
  tw,
  tj,
  tz,
  th,
  tl,
  tg,
  tk,
  to,
  tt,
  tn,
  tr,
  tm,
  tc,
  tv,
  ug,
  ua,
  ae,
  gb,
  us,
  uy,
  uz,
  vu,
  ve,
  vn,
  wf,
  eh,
  ye,
  zm,
  zw;

  @override
  String toString() => name.replaceAll('CountryCode.', '').replaceAll('_', '');

  /// @param value The string representation of the country code
  /// @return The matching [CountryCode] or the first enum value if no match is found
  static CountryCode fromString(String? value) => CountryCode.values.firstWhere(
        (element) => element.toString() == value?.toLowerCase(),
        orElse: () => CountryCode.values.first,
      );
}
